JAVA

* The java compiler that comes with the JDK convert the source code into byte code 

* java is a platform independent
The meaning of Java platform-independent is that the Java compiled code(byte code) can run on all operating systems 
 
* java is object oriented programming language
=======================================================================

WHAT IS OOPS?

*** Object means a real-world entity such as a pen, chair, table, computer, watch, etc. 
*** Object-Oriented Programming is a paradigm to design a program using classes and objects. It simplifies software development and maintenance by providing some concepts:

* Object         ---- Any entity that has state and behavior is known as an object.
* Class          ---- Collection of objects is called class. It is a logical entity. A class can also be defined as a blueprint from which you can create an   individual object. Class doesn't consume any space.

Inheritance      ----- When one object acquires all the properties and behaviors of a parent object, it is known as inheritance. It provides code reusability. It is used to achieve runtime polymorphism.

Polymorphism     ------If one task is performed in different ways, it is known as polymorphism.In Java, we use method overloading and method overriding to achieve polymorphism.

Abstraction     ------- Hiding internal details and showing functionality is known as abstraction. For example phone call, we don't know the internal processing.  In Java, we use abstract class and interface to achieve abstraction.

Encapsulation   ------ Binding (or wrapping) code and data together into a single unit are known as encapsulation. For example, a capsule, it is wrapped with different medicines.
In java we use class to acheive encapsulation. Java bean is the fully encapsulated class because all the data members are private here.


========================================================================

STATIC BLOCK 

static{

}  

this block is executed first rather than the main classs
========================================================================

STATIC METHODS

static void method1{                                                   -----void is used because this wont return anthing

}

=======================================================================
public class Person {
    private String name;

    // Constructor
    public Person(String name) {
        this.name = name;
    }

    // Getter
    public String getName() {
        return name;
    }

    // Setter
    public void setName(String name) {
        this.name = name;
    }
}
======================================================================


                         JBDC ============


=======================================================================

5 steps for the JDBC CONNECTION 

1) Class.forName("oracle.jdbc.driver.OracleDriver");                          //Register for the driver class
2) Connection con=DriverManager.getConnection("jdbc:oracle:thin:@localhost:1521:xe","system","password");   // create 
                                                                                                  a connection object
3) Statement stmt=con.createStatement();                                     // create a statement
4) ResultSet rs=stmt.executeQuery("select * from emp");  
    while(rs.next()){  
            System.out.println(rs.getInt(1)+" "+rs.getString(2));  
    }                                                                       // execute a query
5) con.close();                                                             // close the connextion

========================================================================

Java Database Connectivity with Oracle

import java.sql.*;  
class OracleCon{  
       public static void main(String args[]){  
             try{  
                //step1 load the driver class  
                Class.forName("oracle.jdbc.driver.OracleDriver");  
  
               //step2 create  the connection object  
                Connection con=DriverManager.getConnection(  
                "jdbc:oracle:thin:@localhost:1521:xe","system","oracle");  
  
                 //step3 create the statement object  
                 Statement stmt=con.createStatement();  
  
                //step4 execute query  
                ResultSet rs=stmt.executeQuery("select * from emp");  
                while(rs.next())  
                      System.out.println(rs.getInt(1)+"  "+rs.getString(2)+"  "+rs.getString(3));  
  
                   //step5 close the connection object  
                con.close();  
  
            }catch(Exception e){ System.out.println(e);}  
  
            }  
}

======================================================================================

Java Database Connectivity with MySQL

import java.sql.*;  
class MysqlCon{  
        public static void main(String args[]){  
            try{  
              Class.forName("com.mysql.jdbc.Driver");  
              Connection con=DriverManager.getConnection(  
              "jdbc:mysql://localhost:3306/sonoo","root","root");  
              //here sonoo is database name, root is username and password  
              Statement stmt=con.createStatement();  
              ResultSet rs=stmt.executeQuery("select * from emp");  
              while(rs.next())  
                    System.out.println(rs.getInt(1)+"  "+rs.getString(2)+"  "+rs.getString(3));  
              con.close();  
            }catch(Exception e){ System.out.println(e);}  
            }  
}  

=========================================================================================
equals.IgnoreCase--
=========================================================================================
String college1 = "Stanford University";
String college2 = "stanford university";

if (college1.equalsIgnoreCase(college2)) {
    System.out.println("The college names are equal ignoring case.");
} else {
    System.out.println("The college names are not equal.");
}

In this example, even though college1 and college2 are not exactly the same (due to different use of capital letters), the equalsIgnoreCase method would consider them as equal, and thus “The college names are equal ignoring case.” would be printed.

This method is useful when you want to compare two strings for equality, disregarding their case.

============================================================================================

*  public String toString(), this is a method in Java that is used to convert an object into a string representation.
============================================================================================
Double.parseDouble()
============================================================================================

In Java, Double.parseDouble(String s) is a method from the Double class. It is used to convert a String into a double.
String numberString = "123.45";
double number = Double.parseDouble(numberString);
System.out.println(number);  // This will print: 123.45
===========================================================================================
EXCEPTIONHANDLING
=========================================================================================
A) try
B) catch
C) finally
D) throw
E) throws


throw -----

try{
   throw new Exception("rgr");
}catch(Exception e) {
}

=========================================
creating custom exceptions
=========================================




===============================================
Q)   1. Task Description

The objective is to create a Java class with a `main` method that uses the `Thread.sleep` method, which takes 1000 milliseconds as an argument. This method can throw a checked exception called `InterruptedException`. The initial approach is to use the `throws` keyword to declare that the `main` method can throw the `InterruptedException`.
2. Step 1: Declare `InterruptedException` using `throws` on the main method
3. Step 2: Handle `InterruptedException` using try-catch
4. Step 3: Create a custom exception called MyThreadException
5. Step 4: Use `throw` to throw `MyThreadException` inside the catch block:
6.Step 5: Catch `MyThreadException` and handle it:
7. Explanation: The final version of the code has a `MainThreadExample` class with a `main` method. The method uses `Thread.sleep(1000)` to pause the main thread for 1000 milliseconds. Since this method can throw `InterruptedException`, it is wrapped in a try-catch block. If `InterruptedException` occurs, the catch block throws a custom exception called `MyThreadException`, which is caught and handled in another catch block.The custom exception message is then printed as output.

SOLUTION  
------------------------
ExceptionDemo.java;
-----------------------
package exceptions;
public class ExceptionDemo {
       public static void main(String[] args) {
             try {
                 Thread.sleep(1000);
             } catch (InterruptedException e) {
                 throw new MyThreadException();
             }
       }
}
-----------------------
MyThreadException.java
----------------------
package exceptions;
public class MyThreadException extends RuntimeException {
}



